plugins {
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
}
apply plugin: 'application'
// mainClassName is deprecated, use application { mainClass = ... }
application {
    // Main application entrypoint for the Spring Boot server
    mainClass = 'vn.com.fecredit.chunkedupload.UploadApplication'
}
// Ensure Spring Boot plugin writes the correct main class into the jar manifest
springBoot {
    mainClass = 'vn.com.fecredit.chunkedupload.UploadApplication'
}
repositories {
    mavenCentral()
}

// Force predictable artifact names that match run scripts
bootJar {
    archiveFileName = "server-${project.version}.jar"
    // Do not include dependencies in the server.jar
    mainClass = 'vn.com.fecredit.chunkedupload.UploadApplication'
    // Only include compiled classes and resources
    with jar
}
jar {
    archiveFileName = "server-plain-${project.version}.jar"
}

group = 'vn.com.fecredit.chunkedupload'

dependencies {
    implementation project(':model')
    implementation project(':core')
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.h2database:h2'
    implementation 'org.springframework.security:spring-security-crypto'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    implementation 'org.codehaus.janino:janino'
}
tasks.register('printDependencies', DependencyReportTask)

tasks.register('runBCryptGen', JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    mainClass.set('vn.com.fecredit.chunkedupload.util.BCryptGenTest')
}

test {
    useJUnitPlatform()
    jvmArgs += ["-javaagent:${configurations.testRuntimeClasspath.find { it.name.contains('byte-buddy-agent') }}"]
}
